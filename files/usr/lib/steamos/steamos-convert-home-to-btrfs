#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# vim: et sts=4 sw=4

set -eu

HOME_DEVICE="/dev/disk/by-partsets/shared/home"
HOME_MOUNTPOINT="/home"
HOME_BACKUP="/tmp/homebackup"
HOME_BACKUP_RSYNC_FLAGS="-ahHAX --inplace --delete --stats"
ROOTFS_DEVICE="/dev/disk/by-partsets/self/rootfs"
ROOTFS_MOUNTPOINT="/mnt"
VAR_DEVICE="/dev/disk/by-partsets/self/var"
VAR_MOUNTPOINT="/tmp/var"
SDDM_CONF_FILE="/etc/sddm.conf.d/zzzz-steamos-convert-home-to-btrfs.conf"
LOGFILE="/var/log/steamos-btrfs.log"

if [[ -f /etc/default/steamos-btrfs ]]
then
    source /etc/default/steamos-btrfs
fi
HOME_CONVERT_OPTS="${STEAMOS_BTRFS_HOME_CONVERT_OPTS:--L --uuid copy}"
HOME_MOUNT_OPTS="${STEAMOS_BTRFS_HOME_MOUNT_OPTS:-defaults,nofail,x-systemd.growfs,noatime,lazytime,compress-force=zstd,space_cache=v2,autodefrag,nodiscard}"
HOME_MOUNT_SUBVOL="${STEAMOS_BTRFS_HOME_MOUNT_SUBVOL:-@}"
HOME_FORMAT="${STEAMOS_BTRFS_HOME_FORMAT:-0}"
HOME_FORMAT_OPTS="${STEAMOS_BTRFS_HOME_FORMAT_OPTS:--f}"

cmd() {
    echo '[$]' "${@@Q}" >&2
    "$@"
}

is_true() {
    local v="${1:-}"
    v="${v//[[:space:]]/}"
    v="${v,,}"
    if [[ -n "${v}" && "${v}" != '0' && "${v}" != 'n' && "${v}" != 'no' && "${v}" != 'false' ]]; then
        return 0
    else
        return 1
    fi
}

mask_service() {
    cmd systemctl --no-block mask steamos-convert-home-to-btrfs.service || true
}
clear_sddm_conf() {
    cmd rm -f "$SDDM_CONF_FILE" || true
}
onexit=(clear_sddm_conf mask_service)
exit_handler() {
    for func in "${onexit[@]}"
    do
        "$func" || true
    done
    onexit=()
}
trap exit_handler SIGINT SIGQUIT SIGTERM ERR EXIT

if [[ "$(blkid -o value -s TYPE "$HOME_DEVICE")" != "ext4" ]]
then
    echo "(100%) Removing sddm configuration '$SDDM_CONF_FILE'."
    exit_handler
    echo "(100%) $HOME_MOUNTPOINT is already formatted as btrfs"
    systemd-notify --ready --status="$HOME_MOUNTPOINT is already formatted as btrfs"
    exit 0
fi

home_rsync_exclusions() {
    local ret=1
    if ! cmd mount -o ro "$HOME_DEVICE" "$HOME_MOUNTPOINT"
    then
        return "$ret"
    fi
    local exclusions=(
        '.steamos/offload/cache'
        '.steamos/offload/log'
        '.steamos/offload/tmp'
        'deck/.cache'
        'deck/.local/share/Steam/steamapps'
        'deck/.local/share/Steam/userdata')
    # Calculate maximum allowed temporary data
    local max_size
    max_size="$(df -B 1 --output=avail /tmp/ | tail -n 1 | awk '{print int($1 * 0.9)}')"
    local i=4
    while [[ "$i" -le "${#exclusions[@]}" ]]
    do
        local du_excls=()
        for e in "${exclusions[@]:0:i}"
        do
            du_excls+=("--exclude=${e}")
        done
        local size=0
        size="$(du -b -s -x "${du_excls[@]}" "$HOME_MOUNTPOINT"/ | awk '{print $1}')"
        if [[ "$size" -le "$max_size" ]]
        then
            printf '%s\n' "${exclusions[@]:0:i}"
            ret=0
            break
        fi
        i=$((i+1))
    done
    cmd umount -l "$HOME_MOUNTPOINT" || true
    return "$ret"
}

exit_reboot_error() {
    echo "(100%) Error encountered. Rebooting in 120 seconds..."
    echo "(100%) Please check '${LOGFILE}' and report any issues."
    # don't remove the sddm override too early, sddm might not be started yet
    sleep 10
    clear_sddm_conf
    mask_service
    sleep 110
    cmd systemctl reboot
}

exit_log() {
    if ! [[ -s "$LOGFILE" ]]
    then
        return
    fi
    if [[ "$(blkid -o value -s TYPE "$HOME_DEVICE")" != "btrfs" ]]
    then
        if ! cmd mount "$HOME_DEVICE" "$HOME_MOUNTPOINT"
        then
            return
        fi
        LOGFILE_OFFLOAD="${HOME_MOUNTPOINT}/.steamos/offload${LOGFILE}"
    else
        if ! cmd mount -o "${HOME_MOUNT_OPTS}" "$HOME_DEVICE" "$HOME_MOUNTPOINT"
        then
            return
        fi
        if cmd btrfs subvolume show "${HOME_MOUNTPOINT}/${HOME_MOUNT_SUBVOL}" &>/dev/null
        then
            LOGFILE_OFFLOAD="${HOME_MOUNTPOINT}/${HOME_MOUNT_SUBVOL}/.steamos/offload${LOGFILE}"
        else
            LOGFILE_OFFLOAD="${HOME_MOUNTPOINT}/.steamos/offload${LOGFILE}"
        fi
    fi
    cmd mkdir -p "$(dirname "$LOGFILE_OFFLOAD")" || true
    cmd cat "$LOGFILE" >> "$LOGFILE_OFFLOAD" || true
    cmd journalctl -b -a -o short-iso >> "$LOGFILE_OFFLOAD" || true
    cmd umount -l "$HOME_MOUNTPOINT" || true
}

exit_restore_fstab() {
    cmd mkdir -p "$ROOTFS_MOUNTPOINT"
    if ! cmd mount "$ROOTFS_DEVICE" "$ROOTFS_MOUNTPOINT"
    then
        return
    fi
    cmd btrfs property set "$ROOTFS_MOUNTPOINT" ro false || true
    fstab_files=("$ROOTFS_MOUNTPOINT/etc/fstab")
    cmd mkdir -p "$VAR_MOUNTPOINT"
    if cmd mount "$VAR_DEVICE" "$VAR_MOUNTPOINT" && [[ -f "$VAR_MOUNTPOINT/lib/overlays/etc/upper/fstab" ]]
    then
        fstab_files+=("$VAR_MOUNTPOINT/lib/overlays/etc/upper/fstab")
    fi
    cmd sed -i 's#^\S\+\s\+'"${HOME_MOUNTPOINT}"'\s\+.*$#'"${HOME_DEVICE}"' '"${HOME_MOUNTPOINT}"' ext4 defaults,nofail,x-systemd.growfs 0 2#' "${fstab_files[@]}" || true
    if mountpoint -q "$VAR_MOUNTPOINT"
    then
        cmd umount -l "$VAR_MOUNTPOINT" || true
    fi
    cmd btrfs property set "$ROOTFS_MOUNTPOINT" ro true || true
    cmd umount -l "$ROOTFS_MOUNTPOINT" || true
}

exit_umount_home() {
    cmd umount -l "$HOME_MOUNTPOINT" || true
}

onexit=(exit_restore_fstab exit_log exit_reboot_error)
if cmd mkdir -p "$(dirname "$LOGFILE")" && cmd touch "$LOGFILE"
then
    exec &> >(tee -a "$LOGFILE")
    printf '#### %(%F %T)T ####\n'
fi
echo "(  0%) Creating sddm configuration '$SDDM_CONF_FILE'."
cmd mkdir -p "$(dirname "$SDDM_CONF_FILE")"
cat <<EOF > "$SDDM_CONF_FILE"
[Autologin]
Session=steamos-convert-home-to-btrfs.desktop
User=root
EOF
echo "(  0%) Start btrfs conversion of $HOME_MOUNTPOINT..."
systemd-notify --ready --status="Start btrfs conversion of $HOME_MOUNTPOINT..."
cmd umount -l "$HOME_DEVICE" &>/dev/null || true
# Make sure the filesystem is clean
echo "(  0%) Start filesystem check..."
if ! cmd e2fsck -fvy "$HOME_DEVICE" && [[ "$?" -gt 2 ]]
then
    echo "(100%) Filesystem check error." >&2
    exit 1
fi
echo "(  5%) Filesystem check done."
if is_true "${HOME_FORMAT}"
then
    if rsync_excls_blob="$(home_rsync_exclusions)"
    then
        echo "(  5%) Start /home backup..."
        if ! cmd mount -o ro "$HOME_DEVICE" "$HOME_MOUNTPOINT"
        then
            echo "(100%) Mount error." >&2
            exit 1
        fi
        onexit=(exit_umount_home "${onexit[@]}")
        rsync_excls=()
        readarray -d $'\n' -t rsync_excls <<<"$rsync_excls_blob"
        rsync_excls_cmds=()
        for e in "${rsync_excls[@]}"
        do
            rsync_excls_cmds+=("--exclude=${e}")
        done
        cmd mkdir -p "$HOME_BACKUP"
        if ! cmd rsync ${HOME_BACKUP_RSYNC_FLAGS} "${rsync_excls_cmds[@]}" "$HOME_MOUNTPOINT"/ "$HOME_BACKUP"/
        then
            echo "(100%) Backup error." >&2
            exit 1
        fi
        exit_umount_home
        onexit=("${onexit[@]:1}")
    else
        echo "( 10%) Warning: not enough memory for backup."
    fi
    # Fresh format home partition
    echo "( 20%) Start btrfs format..."
    home_dev_format_opts=()
    home_dev_uuid="$(blkid -o value -s UUID "$HOME_DEVICE")"
    home_dev_label="$(blkid -o value -s LABEL "$HOME_DEVICE")"
    if [[ -n "$home_dev_uuid" ]]
    then
        home_dev_format_opts+=(-U "$home_dev_uuid")
    fi
    if [[ -n "$home_dev_label" ]]
    then
        home_dev_format_opts+=(-L "$home_dev_label")
    fi
    if ! cmd mkfs.btrfs "${home_dev_format_opts[@]}" ${HOME_FORMAT_OPTS} "$HOME_DEVICE"
    then
        echo "(100%) Btrfs format error." >&2
        exit 1
    fi
    if [[ -d "$HOME_BACKUP" ]]
    then
        echo "( 30%) Start /home restore..."
        if ! cmd mount -o "${HOME_MOUNT_OPTS}" "$HOME_DEVICE" "$HOME_MOUNTPOINT"
        then
            echo "(100%) Mount error." >&2
            exit 1
        fi
        onexit=(exit_umount_home "${onexit[@]}")
        if ! cmd rsync ${HOME_BACKUP_RSYNC_FLAGS} "$HOME_BACKUP"/ "$HOME_MOUNTPOINT"/
        then
            echo "(100%) Backup restore error." >&2
            exit 1
        fi
        exit_umount_home
        onexit=("${onexit[@]:1}")
        cmd rm -rf "$HOME_BACKUP" || true
    fi
    echo "( 40%) Btrfs format done."
else
    # Convert to btrfs keeping label and uuid
    echo "(  5%) Start btrfs conversion..."
    if ! cmd btrfs-convert ${HOME_CONVERT_OPTS} "$HOME_DEVICE"
    then
        echo "( 90%) Btrfs conversion error." >&2
        echo "( 90%) Attempting to roll back to ext4..."
        if ! cmd btrfs-convert -r "$HOME_DEVICE"
        then
            echo "(100%) Rollback failed." >&2
        else
            echo "(100%) Rollback succeeded."
        fi
        exit 1
    fi
    echo "( 40%) Btrfs conversion done."
    echo "( 40%) Checking /home mount..."
    if ! cmd mount -o "${HOME_MOUNT_OPTS}" "$HOME_DEVICE" "$HOME_MOUNTPOINT"
    then
        echo "( 90%) Mount error." >&2
        echo "( 90%) Attempting to roll back to ext4..."
        if ! cmd btrfs-convert -r "$HOME_DEVICE"
        then
            echo "(100%) Rollback failed." >&2
        else
            echo "(100%) Rollback succeeded."
        fi
        exit 1
    fi
    exit_umount_home
fi
onexit=("${onexit[@]:1}")
cmd mkdir -p "$ROOTFS_MOUNTPOINT"
if ! cmd mount "$ROOTFS_DEVICE" "$ROOTFS_MOUNTPOINT"
then
    echo "(100%) Mount error." >&2
    exit 1
fi
exit_umount_rootfs() {
    cmd umount -l "$ROOTFS_MOUNTPOINT" || true
}
onexit=(exit_umount_rootfs "${onexit[@]}")
if ! cmd btrfs property set "$ROOTFS_MOUNTPOINT" ro false
then
    echo "(100%) Set readonly false error." >&2
    exit 1
fi
exit_ro_rootfs() {
    cmd btrfs property set "$ROOTFS_MOUNTPOINT" ro true || true
}
onexit=(exit_ro_rootfs "${onexit[@]}")
fstab_files=("$ROOTFS_MOUNTPOINT/etc/fstab")
cmd mkdir -p "$VAR_MOUNTPOINT"
if ! cmd mount "$VAR_DEVICE" "$VAR_MOUNTPOINT"
then
    echo "(100%) Mount error." >&2
    exit 1
fi
exit_umount_var() {
    cmd umount -l "$VAR_MOUNTPOINT" || true
}
onexit=(exit_umount_var "${onexit[@]}")
if [[ -f "$VAR_MOUNTPOINT/lib/overlays/etc/upper/fstab" ]]
then
    fstab_files+=("$VAR_MOUNTPOINT/lib/overlays/etc/upper/fstab")
fi
cmd sed -i 's#^\S\+\s\+'"${HOME_MOUNTPOINT}"'\s\+.*$#'"${HOME_DEVICE}"' '"${HOME_MOUNTPOINT}"' btrfs '"${HOME_MOUNT_OPTS}"',subvol='"${HOME_MOUNT_SUBVOL}"' 0 0#' "${fstab_files[@]}"
exit_umount_var
exit_ro_rootfs
exit_umount_rootfs
onexit=("${onexit[@]:3}")
if ! cmd mount -o "${HOME_MOUNT_OPTS}" "$HOME_DEVICE" "$HOME_MOUNTPOINT"
then
    echo "(100%) Mount error." >&2
    exit 1
fi
onexit=(exit_umount_home "${onexit[@]}")
if ! is_true "${HOME_FORMAT}"
then
    # Remove the original metadata
    echo "( 40%) Remove ext2_saved."
    if ! cmd btrfs subvolume delete "$HOME_MOUNTPOINT"/ext2_saved
    then
        echo "(100%) Subvolume delete ext2_saved error." >&2
        exit 1
    fi
    # Not needed anymore
    echo "( 41%) Remove lost+found."
    cmd rm -rf "$HOME_MOUNTPOINT"/lost+found
    # Remove the swapfile if present
    echo "( 42%) Remove swapfile."
    cmd rm -f "$HOME_MOUNTPOINT"/swapfile
fi
# Create the root subvolume ${HOME_MOUNT_SUBVOL}
echo "( 43%) Create root subvolume ${HOME_MOUNT_SUBVOL}."
if ! cmd btrfs subvolume create "$HOME_MOUNTPOINT/$HOME_MOUNT_SUBVOL"
then
    echo "(100%) Subvolume creation error." >&2
    exit 1
fi
# Move all existing files into the new root
echo "( 44%) Move all files into ${HOME_MOUNT_SUBVOL}..."
if ! cmd find "$HOME_MOUNTPOINT" -mindepth 1 -maxdepth 1 -not -name "$HOME_MOUNT_SUBVOL" -exec mv -t "$HOME_MOUNTPOINT/$HOME_MOUNT_SUBVOL" '{}' +
then
    echo "(100%) Move all files into ${HOME_MOUNT_SUBVOL} error." >&2
    exit 1
fi
echo "( 50%) Moving all files into ${HOME_MOUNT_SUBVOL} done."
# Pass all files through the allocator, can take a while
nbfiles="$(find "$HOME_MOUNTPOINT/$HOME_MOUNT_SUBVOL" -type f -printf '\n' | wc -l)"
if [[ "$nbfiles" -gt 0 ]]
then
    echo "( 50%) Start defragmentation on $nbfiles files..."
    if ! cmd stdbuf -oL btrfs filesystem defrag -czstd -v -r -f "$HOME_MOUNTPOINT/$HOME_MOUNT_SUBVOL" | awk '{printf("( %d%%) Defragmenting %s\n",50+(NR/'"$nbfiles"'*40),$0)}'
    then
        echo "(100%) Defragmentation error." >&2
        exit 1
    fi
    echo "( 90%) Defragmentation done."
fi
# Run balance
echo "( 90%) Start balance..."
if ! cmd btrfs balance start -m -v "$HOME_MOUNTPOINT"
then
    echo "(100%) Balance error." >&2
    exit 1
fi
echo "(100%) Balance done."
echo "(100%) Set up Steam's 'downloading' and 'temp' folders as btrfs subvolumes and disable COW..."
for d in "$HOME_MOUNTPOINT/$HOME_MOUNT_SUBVOL"/deck/.local/share/Steam/steamapps/{downloading,temp}
do
    if ! btrfs subvolume show "$d" &>/dev/null; then
        cmd mkdir -p "$d"
        cmd rm -rf "$d"
        cmd btrfs subvolume create "$d"
        cmd chattr +C "$d"
        d_parts=("$HOME_MOUNTPOINT/$HOME_MOUNT_SUBVOL"/deck)
        readarray -d'/' -t -O 1 d_parts <<<"${d#"${d_parts[0]}"/}"
        i=1
        for p in "${d_parts[@]:1}"
        do
            d_parts[i]="${d_parts[$((i-1))]}/${p%[[:space:]]*}"
            i=$((i+1))
        done
        cmd chown deck:deck "${d_parts[@]}"
    fi
done
echo "(100%) Set up Steam's 'downloading' and 'temp' folders as btrfs subvolumes and disable COW done."
exit_umount_home
onexit=("${onexit[@]:1}")
echo "(100%) Btrfs conversion of $HOME_MOUNTPOINT done."
echo "(100%) Removing sddm configuration '$SDDM_CONF_FILE'."
clear_sddm_conf
mask_service
echo "(100%) Persisting log."
exit_log
onexit=()
systemd-notify --status="Btrfs conversion of $HOME_MOUNTPOINT done."
echo "(100%) Rebooting in 4 seconds..."
sleep 4
cmd systemctl reboot
